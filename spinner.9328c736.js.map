{"version":3,"sources":["js/spin.js","js/spinner.js"],"names":["__assign","Object","assign","t","s","i","n","arguments","length","p","prototype","hasOwnProperty","call","apply","defaults","lines","width","radius","scale","corners","color","fadeColor","animation","rotate","direction","speed","zIndex","className","top","left","shadow","position","Spinner","opts","spin","target","stop","el","document","createElement","setAttribute","css","transform","insertBefore","firstChild","drawLines","requestAnimationFrame","cancelAnimationFrame","animateId","clearTimeout","parentNode","removeChild","undefined","props","prop","style","getColor","idx","borderRadius","Math","round","shadows","parseBoxShadow","degrees","backgroundLine","height","background","transformOrigin","delay","line","boxShadow","normalizeShadow","appendChild","regex","_i","_a","split","matches","match","x","y","xUnits","yUnits","push","prefix","end","normalized","shadows_1","xy","convertOffset","join","radians","PI","sin","cos","querySelector","spinner"],"mappings":"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","file":"spinner.9328c736.js","sourceRoot":"../src","sourcesContent":["var __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nvar defaults = {\n    lines: 12,\n    length: 7,\n    width: 5,\n    radius: 10,\n    scale: 1.0,\n    corners: 1,\n    color: '#000',\n    fadeColor: 'transparent',\n    animation: 'spinner-line-fade-default',\n    rotate: 0,\n    direction: 1,\n    speed: 1,\n    zIndex: 2e9,\n    className: 'spinner',\n    top: '50%',\n    left: '50%',\n    shadow: '0 0 1px transparent',\n    position: 'absolute',\n};\nvar Spinner = /** @class */ (function () {\n    function Spinner(opts) {\n        if (opts === void 0) { opts = {}; }\n        this.opts = __assign(__assign({}, defaults), opts);\n    }\n    /**\n     * Adds the spinner to the given target element. If this instance is already\n     * spinning, it is automatically removed from its previous target by calling\n     * stop() internally.\n     */\n    Spinner.prototype.spin = function (target) {\n        this.stop();\n        this.el = document.createElement('div');\n        this.el.className = this.opts.className;\n        this.el.setAttribute('role', 'progressbar');\n        css(this.el, {\n            position: this.opts.position,\n            width: 0,\n            zIndex: this.opts.zIndex,\n            left: this.opts.left,\n            top: this.opts.top,\n            transform: \"scale(\" + this.opts.scale + \")\",\n        });\n        if (target) {\n            target.insertBefore(this.el, target.firstChild || null);\n        }\n        drawLines(this.el, this.opts);\n        return this;\n    };\n    /**\n     * Stops and removes the Spinner.\n     * Stopped spinners may be reused by calling spin() again.\n     */\n    Spinner.prototype.stop = function () {\n        if (this.el) {\n            if (typeof requestAnimationFrame !== 'undefined') {\n                cancelAnimationFrame(this.animateId);\n            }\n            else {\n                clearTimeout(this.animateId);\n            }\n            if (this.el.parentNode) {\n                this.el.parentNode.removeChild(this.el);\n            }\n            this.el = undefined;\n        }\n        return this;\n    };\n    return Spinner;\n}());\nexport { Spinner };\n/**\n * Sets multiple style properties at once.\n */\nfunction css(el, props) {\n    for (var prop in props) {\n        el.style[prop] = props[prop];\n    }\n    return el;\n}\n/**\n * Returns the line color from the given string or array.\n */\nfunction getColor(color, idx) {\n    return typeof color == 'string' ? color : color[idx % color.length];\n}\n/**\n * Internal method that draws the individual lines.\n */\nfunction drawLines(el, opts) {\n    var borderRadius = (Math.round(opts.corners * opts.width * 500) / 1000) + 'px';\n    var shadow = 'none';\n    if (opts.shadow === true) {\n        shadow = '0 2px 4px #000'; // default shadow\n    }\n    else if (typeof opts.shadow === 'string') {\n        shadow = opts.shadow;\n    }\n    var shadows = parseBoxShadow(shadow);\n    for (var i = 0; i < opts.lines; i++) {\n        var degrees = ~~(360 / opts.lines * i + opts.rotate);\n        var backgroundLine = css(document.createElement('div'), {\n            position: 'absolute',\n            top: -opts.width / 2 + \"px\",\n            width: (opts.length + opts.width) + 'px',\n            height: opts.width + 'px',\n            background: getColor(opts.fadeColor, i),\n            borderRadius: borderRadius,\n            transformOrigin: 'left',\n            transform: \"rotate(\" + degrees + \"deg) translateX(\" + opts.radius + \"px)\",\n        });\n        var delay = i * opts.direction / opts.lines / opts.speed;\n        delay -= 1 / opts.speed; // so initial animation state will include trail\n        var line = css(document.createElement('div'), {\n            width: '100%',\n            height: '100%',\n            background: getColor(opts.color, i),\n            borderRadius: borderRadius,\n            boxShadow: normalizeShadow(shadows, degrees),\n            animation: 1 / opts.speed + \"s linear \" + delay + \"s infinite \" + opts.animation,\n        });\n        backgroundLine.appendChild(line);\n        el.appendChild(backgroundLine);\n    }\n}\nfunction parseBoxShadow(boxShadow) {\n    var regex = /^\\s*([a-zA-Z]+\\s+)?(-?\\d+(\\.\\d+)?)([a-zA-Z]*)\\s+(-?\\d+(\\.\\d+)?)([a-zA-Z]*)(.*)$/;\n    var shadows = [];\n    for (var _i = 0, _a = boxShadow.split(','); _i < _a.length; _i++) {\n        var shadow = _a[_i];\n        var matches = shadow.match(regex);\n        if (matches === null) {\n            continue; // invalid syntax\n        }\n        var x = +matches[2];\n        var y = +matches[5];\n        var xUnits = matches[4];\n        var yUnits = matches[7];\n        if (x === 0 && !xUnits) {\n            xUnits = yUnits;\n        }\n        if (y === 0 && !yUnits) {\n            yUnits = xUnits;\n        }\n        if (xUnits !== yUnits) {\n            continue; // units must match to use as coordinates\n        }\n        shadows.push({\n            prefix: matches[1] || '',\n            x: x,\n            y: y,\n            xUnits: xUnits,\n            yUnits: yUnits,\n            end: matches[8],\n        });\n    }\n    return shadows;\n}\n/**\n * Modify box-shadow x/y offsets to counteract rotation\n */\nfunction normalizeShadow(shadows, degrees) {\n    var normalized = [];\n    for (var _i = 0, shadows_1 = shadows; _i < shadows_1.length; _i++) {\n        var shadow = shadows_1[_i];\n        var xy = convertOffset(shadow.x, shadow.y, degrees);\n        normalized.push(shadow.prefix + xy[0] + shadow.xUnits + ' ' + xy[1] + shadow.yUnits + shadow.end);\n    }\n    return normalized.join(', ');\n}\nfunction convertOffset(x, y, degrees) {\n    var radians = degrees * Math.PI / 180;\n    var sin = Math.sin(radians);\n    var cos = Math.cos(radians);\n    return [\n        Math.round((x * cos + y * sin) * 1000) / 1000,\n        Math.round((-x * sin + y * cos) * 1000) / 1000,\n    ];\n}\n","import { Spinner } from './spin.js';\n\n// Spinner usage\n\nvar opts = {\n  lines: 20, // The number of lines to draw\n  length: 80, // The length of each line\n  width: 21, // The line thickness\n  radius: 49, // The radius of the inner circle\n  scale: 0.95, // Scales overall size of the spinner\n  corners: 1, // Corner roundness (0..1)\n  speed: 0.9, // Rounds per second\n  rotate: 0, // The rotation offset\n  animation: 'spinner-line-shrink', // The CSS animation name for the lines\n  direction: 1, // 1: clockwise, -1: counterclockwise\n  color: '#0000ff', // CSS color or array of colors\n  fadeColor: 'transparent', // CSS color or array of colors\n  top: '51%', // Top position relative to parent\n  left: '50%', // Left position relative to parent\n  shadow: '0 0 1px transparent', // Box-shadow for the lines\n  zIndex: 2000000000, // The z-index (defaults to 2e9)\n  className: 'spinner', // The CSS class to assign to the spinner\n  position: 'absolute', // Element positioning\n};\n\nexport const target = document.querySelector('.test-spinner');\nexport const spinner = new Spinner(opts);"]}